application {
  config {
    applicationType gateway
    authenticationType oauth2
    baseName gateway
    blueprints []
    buildTool gradle
    cacheProvider hazelcast
    clientFramework angular
    clientPackageManager npm
    clientTheme darkly
    clientThemeVariant dark
    databaseType sql
    devDatabaseType h2Disk
    dtoSuffix DTO
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation true
    jhiPrefix jhi
    jhipsterVersion "7.0.1"
    languages [en, pl]
    messageBroker kafka
    nativeLanguage en
    otherModules []
    packageName me.rasztabiga.fridgy
    prodDatabaseType postgresql
    reactive true
    searchEngine elasticsearch
    serverPort 8080
    serviceDiscoveryType eureka
    skipClient false
    skipServer false
    skipUserManagement true
    testFrameworks [cypress]
    websocket false
  }
  entities *
}

application {
  config {
    baseName products
    applicationType microservice
    packageName me.rasztabiga.fridgy.products
    serviceDiscoveryType eureka
    authenticationType oauth2
    prodDatabaseType postgresql
    cacheProvider hazelcast
    buildTool gradle
    serverPort 8081
    skipUserManagement true
  }
  entities Product, ProductCategory, ProductUnit, GroceryItem, Recipe, RecipeIngredient
}

/* Entities for Products Microservice */
entity Product {
    name String required
    eanCode String
}

entity ProductCategory {
    name String required unique
}

entity ProductUnit {
    name String required unique
}

entity GroceryItem {
	quantity Double
	description String
}

relationship ManyToOne {
	GroceryItem{user(login)} to User
	GroceryItem{product} to Product
	GroceryItem{unit} to ProductUnit
}

relationship OneToMany {
	ProductCategory{product} to Product{productCategory}
}

relationship ManyToMany {
	Product{productUnit} to ProductUnit{product}
}

entity Recipe {
	name String required
	instructionsBody String required
}

entity RecipeIngredient {
	quantity Double
}

relationship OneToMany {
	Recipe{recipeIngredients} to RecipeIngredient{recipe}
}

relationship ManyToOne {
    RecipeIngredient{product} to Product
    RecipeIngredient{productUnit} to ProductUnit
}

dto Product, ProductCategory, ProductUnit, GroceryItem, Recipe, RecipeIngredient with mapstruct
service Product, ProductCategory, ProductUnit, GroceryItem, Recipe, RecipeIngredient with serviceClass
paginate Product, GroceryItem with infinite-scroll
paginate Recipe with pagination
microservice Product, ProductCategory, ProductUnit, GroceryItem, Recipe, RecipeIngredient with products

// will be created under 'docker-compose' folder
deployment {
	deploymentType docker-compose
	appsFolders [gateway, products]
	dockerRepositoryName "fridgy"
}

// will be created under 'kubernetes' folder
deployment {
	deploymentType kubernetes
	appsFolders [gateway, products]
	dockerRepositoryName "fridgy"
	kubernetesNamespace fridgy
  // monitoring prometheus
}
