application {
  config {
    applicationType gateway
    authenticationType oauth2
    baseName gateway
    blueprints []
    buildTool gradle
    cacheProvider hazelcast
    clientFramework vue
    clientPackageManager npm
    clientTheme darkly
    clientThemeVariant dark
    databaseType sql
    devDatabaseType h2Disk
    dtoSuffix DTO
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation true
    jhiPrefix jhi
    jhipsterVersion "7.0.1"
    languages [en, pl]
    messageBroker kafka
    nativeLanguage en
    otherModules []
    packageName me.rasztabiga.fridgy
    prodDatabaseType postgresql
    reactive true
    searchEngine elasticsearch
    serverPort 8080
    serviceDiscoveryType eureka
    skipClient false
    skipServer false
    skipUserManagement true
    testFrameworks [cypress]
    websocket false
  }
  entities *
}

application {
  config {
    baseName products
    applicationType microservice
    packageName me.rasztabiga.fridgy.products
    serviceDiscoveryType eureka
    authenticationType oauth2
    prodDatabaseType postgresql
    cacheProvider hazelcast
    buildTool gradle
    serverPort 8082
    skipUserManagement true
  }
  entities Product, ProductCategory, ProductUnit
}

application {
  config {
    baseName groceries
    applicationType microservice
    packageName me.rasztabiga.fridgy.groceries
    serviceDiscoveryType eureka
    authenticationType oauth2
    prodDatabaseType postgresql
    cacheProvider hazelcast
    buildTool gradle
    serverPort 8083
    skipUserManagement true
  }
  entities GroceryItem
}

application {
  config {
    baseName recipes
    applicationType microservice
    packageName me.rasztabiga.fridgy.recipes
    serviceDiscoveryType eureka
    authenticationType oauth2
    prodDatabaseType postgresql
    cacheProvider hazelcast
    buildTool gradle
    serverPort 8084
    skipUserManagement true
  }
  entities Recipe, RecipeIngredient
}

/* Entities for Products Microservice */
entity Product {
    name String required
    eanCode String
}

entity ProductCategory {
    name String required unique
}

entity ProductUnit {
    name String required unique
}

relationship OneToMany {
   ProductCategory{product} to Product{productCategory(name)}
   ProductUnit{product} to Product{productUnit(name)}
}

service Product, ProductCategory, ProductUnit with serviceClass
paginate Product with pagination
microservice Product, ProductCategory, ProductUnit with products

/* Entities for Groceries Microservice */
entity GroceryItem {

}

/* Entities for Recipes Microservice */
entity Recipe {

}

entity RecipeIngredient {

}

// will be created under 'docker-compose' folder
deployment {
  deploymentType docker-compose
  appsFolders [gateway, products, groceries, recipes]
  dockerRepositoryName "fridgy"
}

// will be created under 'kubernetes' folder
deployment {
  deploymentType kubernetes
  appsFolders [gateway, products, groceries, recipes]
  dockerRepositoryName "fridgy"
  kubernetesNamespace fridgy
  monitoring prometheus
}
